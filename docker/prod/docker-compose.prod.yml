services:
  client:
    build:
      context: ../..
      dockerfile: docker/prod/Dockerfile.client
      target: production
      args:
        NEXT_PUBLIC_CLIENT_URL: ${NEXT_PUBLIC_CLIENT_URL}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL_DOCKER}
        NEXT_PUBLIC_MIDDLEWARE_API_URL: ${NEXT_PUBLIC_MIDDLEWARE_API_URL_DOCKER}
        NEXT_PUBLIC_AZURE_BLOB_URL: ${NEXT_PUBLIC_AZURE_BLOB_URL}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    ports:
      - "3000:3000"
    networks:
      - lootopia_network

  server:
    build:
      context: ../..
      dockerfile: docker/prod/Dockerfile.server
      target: production
    environment:
      NODE_ENV: production
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${DB_HOST_DOCKER}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER_DOCKER}
      DB_PASSWORD: ${DB_PASSWORD_DOCKER}
      DB_NAME: ${DB_NAME_DOCKER}
      REDIS_HOST: ${REDIS_HOST_DOCKER}
      REDIS_PORT: ${REDIS_PORT_DOCKER}
      REDIS_USERNAME: ${REDIS_USERNAME_DOCKER}
      REDIS_PASSWORD: ${REDIS_PASSWORD_DOCKER}
      REDIS_DB: ${REDIS_DB_DOCKER}
      AZURE_ACCOUNT_NAME: ${AZURE_ACCOUNT_NAME}
      AZURE_ACCOUNT_KEY: ${AZURE_ACCOUNT_KEY}
      AZURE_BLOB_CONTAINER: ${AZURE_BLOB_CONTAINER}
      AZURE_BLOB_CONNECTION: ${AZURE_BLOB_CONNECTION_DOCKER}
      SENDGRID_KEY: ${SENDGRID_KEY}
      SENDGRID_BASE_URL: ${SENDGRID_BASE_URL}
      SENDGRID_SENDER: ${SENDGRID_SENDER}
      SENDGRID_TEMPLATE_REGISTER: ${SENDGRID_TEMPLATE_REGISTER}
      SENDGRID_TEMPLATE_EMAIL_CHANGE_VALIDATION: ${SENDGRID_TEMPLATE_EMAIL_CHANGE_VALIDATION}
      SENDGRID_TEMPLATE_PASSWORD_RESET: ${SENDGRID_TEMPLATE_PASSWORD_RESET}
      SENDGRID_TEMPLATE_REACTIVATE_ACCOUNT: ${SENDGRID_TEMPLATE_REACTIVATE_ACCOUNT}
      SENDGRID_TEMPLATE_DEACTIVATE_ACCOUNT: ${SENDGRID_TEMPLATE_DEACTIVATE_ACCOUNT}
      SECURITY_JWT_SECRET: ${SECURITY_JWT_SECRET}
      SECURITY_PASSWORD_PEPPER: ${SECURITY_PASSWORD_PEPPER}
      SECURITY_COOKIE_SECRET: ${SECURITY_COOKIE_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      STRIPE_SECRET: ${STRIPE_SECRET}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    ports:
      - "3001:3001"
    networks:
      - lootopia_network
    depends_on:
      - db
      - redis
      - azurite

  migrations:
    build:
      context: ../..
      dockerfile: docker/prod/Dockerfile.migrations
      target: prod
    environment:
      NODE_ENV: production
      DB_HOST: ${DB_HOST_DOCKER}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER_DOCKER}
      DB_PASSWORD: ${DB_PASSWORD_DOCKER}
      DB_NAME: ${DB_NAME_DOCKER}
    networks:
      - lootopia_network
    depends_on:
      db:
        condition: service_healthy
    command: ["sh", "-c", "pnpm run db:migrate && pnpm run db:seed"]
    restart: "no"

  db:
    image: "postgis/postgis:17-3.5-alpine"
    environment:
      POSTGRES_USER: ${DB_USER_DOCKER}
      POSTGRES_PASSWORD: ${DB_PASSWORD_DOCKER}
      POSTGRES_DB: ${DB_NAME_DOCKER}
    ports:
      - "5432:5432"
    networks:
      - lootopia_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER_DOCKER} -h 127.0.0.1 -d ${DB_NAME_DOCKER}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - lootopia_network

  azurite:
    image: "mcr.microsoft.com/azure-storage/azurite"
    hostname: azurite
    restart: always
    command: "azurite --loose --blobHost 0.0.0.0 --blobPort 10000 --queueHost 0.0.0.0 --queuePort 10001 --location /workspace --debug /workspace/debug.log"
    ports:
      - "10000:10000"
      - "10001:10001"
    volumes:
      - ./azurite:/workspace
    networks:
      - lootopia_network

  stripe-listener:
    build:
      context: ../..
      dockerfile: docker/prod/Dockerfile.stripe
    environment:
      STRIPE_API_KEY: ${STRIPE_SECRET}
    networks:
      - lootopia_network
    depends_on:
      - server
    command: ["sh", "-c", "stripe listen --forward-to server:3001/shop/webhook > /dev/null 2>&1"]

networks:
  lootopia_network:
    driver: bridge
